---
const { header, links, limit = -1, current = "content" } = Astro.props;
export type ContentLink = {
  name: string;
  youTubeLink?: string;
  raw?: {
    src: string;
    width: string;
    height: string;
  };
};
let linksToShow: ContentLink[] = links;
if (limit > 0) {
  linksToShow = links.slice(0, limit);
}
---

<div class="container">
  <h1>{header}</h1>
  {
    linksToShow.map((link, index) => {
      return (
        <div>
          {index !== 0 && <hr />}
          <h2>{link.name}</h2>
          {link.youTubeLink ? (
            <iframe
              width="560"
              height="315"
              src={link.youTubeLink}
              title={link.name}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowfullscreen
            />
          ) : undefined}
          {link.raw ? (
            <iframe
              src={link.raw.src}
              width={link.raw.width}
              height={link.raw.height}
            />
          ) : undefined}
          {index === limit - 1 && <hr />}
        </div>
      );
    })
  }
</div>

<style>
  h2,
  .post-item-footer {
    font-family: var(--font-family-sans);
    font-weight: 700;
  }

  .post-item-date {
    color: var(--text-secondary);
    text-align: left;
    text-transform: uppercase;
    margin-right: 16px;
  }

  hr {
    margin: 60px auto;
  }
</style>
